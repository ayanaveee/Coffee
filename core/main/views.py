from rest_framework import generics, permissions, status
from rest_framework.views import APIView
import random
import uuid
from rest_framework.response import Response
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAuthenticated
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.utils.dateparse import parse_datetime
from django_filters.rest_framework import DjangoFilterBackend
from .filters import ProductFilter
from .models import *
from .serializers import *

#–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
class IndexAPIView(generics.GenericAPIView):
    filter_backends = [DjangoFilterBackend]

    def get(self, request):
        # –¢–æ–ø-–±–∞–Ω–Ω–µ—Ä—ã
        top_banner = Banner.objects.filter(location="index_head")
        top_banner_data = BannerListSerializer(top_banner, many=True).data

        # –ë–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã (—Ç–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
        best_sellers = Product.objects.filter(is_best_seller=True)[:5]
        best_sellers_data = ProductListSerializer(best_sellers, many=True).data

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ–π–Ω–µ
        about_coffee = {
            "image": "/media/about_coffee.jpg",
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—é! –ó–¥–µ—Å—å –≤–∞—Ä—è—Ç –ª—É—á—à–∏–π –∫–æ—Ñ–µ."
        }

        # –¶–∏—Ç–∞—Ç–∞
        quote = "–ñ–∏–∑–Ω—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞, —á—Ç–æ–±—ã –ø–∏—Ç—å –ø–ª–æ—Ö–æ–π –∫–æ—Ñ–µ ‚òïÔ∏è"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        categories = Category.objects.all()
        categories_data = CategorySerializer(categories, many=True).data

        # –§—É—Ç–µ—Ä
        footer = {
            "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 12",
            "email": "mochamuse@gmail.com",
            "phone": "+996 555 123456",
            "social": {
                "instagram": "https://instagram.com",
                "facebook": "https://facebook.com"
            }
        }

        return Response({
            "top_banner": top_banner_data,
            "best_sellers": best_sellers_data,
            "about_coffee": about_coffee,
            "quote": quote,
            "categories": categories_data,
            "footer": footer
        })



class ProductListAPIView(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductListSerializer
    permission_classes = [permissions.AllowAny]
    filterset_class = ProductFilter
    search_fields = ['title', 'description']
    ordering_fields = ['price', 'title', 'id']

#–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
class ProductDetailAPIView(generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductDetailSerializer
    permission_classes = [permissions.AllowAny]


class BasketItemsCreateView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = BasketItemsCreateSerializer

    def get_serializer_context(self):
        return {"request": self.request}

    def perform_create(self, serializer):
        basket, _ = Basket.objects.get_or_create(user=self.request.user)
        product = serializer.validated_data["product"]
        quantity = serializer.validated_data["quantity"]

        item, created = BasketItems.objects.get_or_create(
            basket=basket, product=product,
            defaults={"quantity": quantity}
        )
        if not created:
            item.quantity += quantity
            item.save()

        basket.update_total()


class BasketItemsListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = BasketItemsSerializer

    def get_queryset(self):
        basket, _ = Basket.objects.get_or_create(user=self.request.user)
        return basket.items.all()


class BasketItemDeleteView(generics.DestroyAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = BasketItemsSerializer

    def get_queryset(self):
        basket, _ = Basket.objects.get_or_create(user=self.request.user)
        return basket.items.all()


class CheckoutAPIView(generics.GenericAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = CheckoutSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        basket = get_object_or_404(Basket, id=serializer.validated_data["basket_id"], user=request.user)
        if not basket.items.exists():
            return Response({"detail": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."}, status=400)

        total = sum((item.product.new_price or item.product.price) * item.quantity for item in basket.items.all())
        order = Order.objects.create(user=request.user, total_price=total, status="–°–æ–∑–¥–∞–Ω")

        for item in basket.items.all():
            OrderItems.objects.create(order=order, product=item.product, quantity=item.quantity)

        basket.items.all().delete()
        basket.update_total()

        return Response({"detail": f"–ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ."}, status=201)


class OrderListAPIView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = OrderNestedSerializer

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user).order_by("-created_at")


class OrderDetailAPIView(generics.RetrieveAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = OrderNestedSerializer
    lookup_field = "id"

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user)


class OrderPaymentView(APIView):
    """
    –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞ –∏–ª–∏ MBank).
    """

    def post(self, request, pk):
        try:
            order = Order.objects.get(pk=pk)
        except Order.DoesNotExist:
            return Response({"error": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        serializer = OrderPaySerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        payment_method = serializer.validated_data["payment_method"]

        # --- –û–ü–õ–ê–¢–ê –ö–ê–†–¢–û–ô ---
        if payment_method == "Card":
            card_number = serializer.validated_data["card_number"]

            # –§–µ–π–∫–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, VISA = 4****)
            if card_number.startswith("4"):
                order.transaction_id = str(uuid.uuid4())[:12]  # –≥–µ–Ω–µ—Ä–∏–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                order.status = "–û–ø–ª–∞—á–µ–Ω"
                order.payment_method = "Card"
                order.save()
                return Response(
                    {
                        "message": "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ",
                        "transaction_id": order.transaction_id
                    },
                    status=200
                )
            else:
                return Response({"error": "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º ‚ùå"}, status=400)
        elif payment_method == "Cash":
            order.status = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            order.payment_method = "Cash"
            order.save()
            return Response({"message": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üíµ"}, status=200)


        # --- –û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó MBANK ---
        elif payment_method == "MBank":
            phone = serializer.validated_data["phone_number"]
            otp = serializer.validated_data.get("otp")

            if not otp:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OTP (—Ñ–µ–π–∫–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
                generated_otp = str(random.randint(1000, 9999))
                order.confirm_code = generated_otp
                order.status = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                order.payment_method = "MBank"
                order.save()

                return Response(
                    {
                        "message": f"OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}",
                        "test_otp": generated_otp  # ‚ö†Ô∏è –≤ —Ä–µ–∞–ª–µ –±—ã –Ω–µ –æ—Ç–¥–∞–≤–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—É
                    },
                    status=200
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP
            if otp == order.confirm_code:
                order.transaction_id = str(uuid.uuid4())[:12]
                order.status = "–û–ø–ª–∞—á–µ–Ω"
                order.save()
                return Response(
                    {
                        "message": "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ MBank –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ",
                        "transaction_id": order.transaction_id
                    },
                    status=200
                )
            else:
                return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π OTP ‚ùå"}, status=400)

        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã"}, status=400)

class OrderReceiptAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, id):
        order = get_object_or_404(Order, id=id, user=request.user)

        created = timezone.localtime(order.created_at)
        items = []
        subtotal = 0

        for item in order.items.select_related("product"):
            price = item.product.new_price or item.product.price
            total = float(price) * item.quantity
            subtotal += total
            items.append({
                "title": item.product.title,
                "quantity": item.quantity,
                "price": float(price),
                "line_total": total,
                "options": []
            })

        receipt = {
            "success": order.status == "paid",
            "title": "Thank you!",
            "message": "Your transaction was successful" if order.status == "paid" else "Waiting for payment",
            "transaction_id": order.transaction_id,
            "date": created.strftime("%d %B %y"),
            "time": created.strftime("%I:%M %p"),
            "items": items,
            "payment_summary": {
                "price": round(subtotal, 2),
                "voucher": float(order.voucher_amount or 0),
                "total": float(order.total_price)
            },
            "payment_method": order.payment_method or "Card",
            "schedule_pickup": order.pickup_at.strftime("%I.%M %p") if order.pickup_at else None
        }

        return Response(receipt)
